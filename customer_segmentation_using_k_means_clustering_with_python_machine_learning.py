# -*- coding: utf-8 -*-
"""Customer Segmentation using K-Means Clustering with Python ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XivUNyG3AYfpZGz_KFdwGwY_Pi37wLK0

Importing the Dependencies
"""

import numpy as np # add array
import pandas as pd # data frame
import matplotlib.pyplot as plt #use for making plot
import seaborn as sns #use for making plot
from sklearn.cluster import KMeans # This is K Means Clustering Algo take from sklearn.cluster library

"""data Collection & Analysis"""

# loading the data from csv file to a pandas DataFrame

customer_data = pd.read_csv('/content/Mall_Customers.csv')

# Print first 5 rows in the DataFrame
customer_data.head()

#finding the Number of rows and colums
customer_data.shape

# Getting some information about the dataset
customer_data.info() #null values means missig value

# checking for missing values
customer_data.isnull().sum() # give number of missing values in each column

"""Choosing the Anual Income Column & Spending Score Column"""

X = customer_data.iloc[:,[3,4]].values  # iloc is use for located the specific columns # here we use slicing ':' its use for takeing the coloumns otherwise the rows will be selected and take 3 and 4 coloumn # .values for taking values

print(X)

"""Choosing the number of Clusters

Ussing Parameter :
1. WCSS ---> Within Cluster Sum of Squares
"""

# Finding WCSS value for Diffrent number of cluster

wcss = []

for i in range(1,11):  # taking values from 1 to 10 (n-1) order
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42) #add KMeans function in kmeans # number of clusters is i #init means initiation kmeans clustering #random_state = 42 means data taking random value as 42 splitting data .
  # kmeans = KMeans(n_clusters=i, init='k-means++', n_init=10, random_state=42)  ##if uppur code line gives warning use this and set n_init explicity
  ##The warnings are just to inform you of an upcoming change in scikit-learn's default behavior. Setting n_init explicitly will prevent the warnings and ensure that your code behaves consistently across different versions of the library.
  kmeans.fit(X) #fitting the data
  wcss.append(kmeans.inertia_) #appending the wcss value # inertia_ method of kMeans class calculates wcss for that model and give wcss value for each clusters

# plot an elbow graph

sns.set() #gives basic parameter for the graph
plt.plot(range(1,11), wcss) #plotting the range as same as the wcss
plt.title('The Elbow Point Graph') #Titile the graph
plt.xlabel('Number of Clusters') #x label
plt.ylabel('WCSS') #y label
plt.show() #show the graph

# there are two down points which are called Elbow points

"""Optimum Number of Clusters = 5


*   because after this points there is no sharp significance Drop So We can Choose our Clusters From This

Training The K-Means Clustering Model and here The value of k is 5.
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0) #add KMeans function in kmeans # number of clusters is 5 #init means initiation kmeans clustering #random_state = 0 means data taking random value as 0 splitting data .

#Return a label for each data point based on there structure
Y = kmeans.fit_predict(X) # fit_predict will return the cluster no for each of this datapoints
print(Y)

"""5 Clusters ---> 0, 1, 2, 3, 4

Vizualizing all the Clusters
"""

# Plotting all the Clusters and Their Centriods(representation points of each Clusters)

plt.figure(figsize=(8,8)) #set the figure size
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='yellow', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='blue', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='red', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='brown', label='Cluster 5')

# Y represented the cluster value coressponding to X
# s represents size of the dots for scatterplot
# c represents the colour of the dots
# X[Y==0,0] X coordinate of this Cluster 1 --> X[Y==0,0] first 0 means all the values of cluster 0... Second 0 represents the first column of the sheet in 10no. line code output Which is Annual Income.
# X[Y==0,1] Y coordinate of this Cluster 1 --> X[Y==0,1] 1 represents the second column of the sheet in 10no. line code output which is Speding Scores... first 0 means all the values of cluster 0

#plotting the centroids of the clusters :
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')

# 0 represents the centroid of X-axis and 1 represents the centroid of Y-axis

plt.title('Customer Groups') #title the graph
plt.xlabel('Annual Income') # x label
plt.ylabel('Spending Score') # y label
plt.show() #print the graph